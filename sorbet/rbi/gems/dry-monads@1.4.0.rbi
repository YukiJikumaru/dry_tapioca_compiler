# typed: true

# DO NOT EDIT MANUALLY
# This is an autogenerated file for types exported from the `dry-monads` gem.
# Please instead update this file by running `bin/tapioca gem dry-monads`.

# Inspired by standard library implementation
# for Time serialization/deserialization see (json/lib/json/add/time.rb)
#
# source://dry-monads//lib/dry/monads/registry.rb#5
module Dry
  class << self
    # source://dry-core/0.8.1/lib/dry/core/equalizer.rb#11
    def Equalizer(*keys, **options); end

    # source://dry-struct/1.4.0/lib/dry/struct.rb#33
    def Struct(attributes = T.unsafe(nil), &block); end

    # source://dry-types/1.5.1/lib/dry/types.rb#226
    def Types(*namespaces, default: T.unsafe(nil), **aliases); end
  end
end

# Common, idiomatic monads for Ruby
#
# @api private
#
# source://dry-monads//lib/dry/monads/registry.rb#9
module Dry::Monads
  class << self
    # Build a module with cherry-picked monads.
    # It saves a bit of typing when you add multiple
    # monads to one class. Not loaded monads get loaded automatically.
    #
    # @api public
    # @example
    #   require 'dry/monads'
    #
    #   class CreateUser
    #   include Dry::Monads[:result, :do]
    #
    #   def initialize(repo, send_email)
    #   @repo = repo
    #   @send_email = send_email
    #   end
    #
    #   def call(name)
    #   if @repo.user_exist?(name)
    #   Failure(:user_exists)
    #   else
    #   user = yield @repo.add_user(name)
    #   yield @send_email.(user)
    #   Success(user)
    #   end
    #   end
    #   end
    # @param monads [Array<Symbol>]
    # @return [Module]
    #
    # source://dry-monads//lib/dry/monads.rb#49
    def [](*monads); end

    # @api public
    # @private
    # @private
    #
    # source://dry-monads//lib/dry/monads.rb#12
    def included(base); end

    protected

    # @api private
    #
    # source://dry-monads//lib/dry/monads/registry.rb#32
    def registry=(registry); end

    private

    # @api private
    # @private
    # @return [Boolean]
    #
    # source://dry-monads//lib/dry/monads/registry.rb#68
    def all_loaded?; end

    # @api private
    # @private
    #
    # source://dry-monads//lib/dry/monads/registry.rb#61
    def constructors; end

    # @api private
    # @private
    #
    # source://dry-monads//lib/dry/monads/registry.rb#48
    def known_monads; end

    # @api private
    # @private
    #
    # source://dry-monads//lib/dry/monads/registry.rb#53
    def load_monad(name); end

    # @api private
    # @private
    #
    # source://dry-monads//lib/dry/monads/registry.rb#39
    def register_mixin(name, mod); end

    # @api private
    #
    # source://dry-monads//lib/dry/monads/registry.rb#30
    def registry; end
  end
end
